# Guide d'Installation RINGO

## Prérequis

### Environnement de développement
- Node.js 18.x ou supérieur
- npm 9.x ou supérieur
- Un compte Supabase
- Un compte OpenAI avec une clé API

### Services requis
- Supabase (base de données, authentification, stockage)
- OpenAI API (GPT-4 Turbo)

## Installation pas à pas

### 1. Création du projet

```bash
# Créer un nouveau projet Vite avec React et TypeScript
npm create vite@latest ringo -- --template react-ts

# Se déplacer dans le dossier du projet
cd ringo

# Installer les dépendances de base
npm install
```

### 2. Installation des dépendances

```bash
# Dépendances principales
npm install @supabase/supabase-js@2.39.7 \
           d3@7.8.5 \
           framer-motion@11.0.8 \
           lucide-react@0.344.0 \
           mammoth@1.7.0 \
           openai@4.28.0 \
           pdfjs-dist@3.11.174 \
           react@18.3.1 \
           react-dom@18.3.1 \
           react-dropzone@14.2.3 \
           react-markdown@9.0.1 \
           react-router-dom@6.22.2 \
           react-syntax-highlighter@15.5.0 \
           rehype-raw@7.0.0 \
           rehype-sanitize@6.0.0 \
           remark-gfm@4.0.0 \
           tesseract.js@5.0.5 \
           web-streams-polyfill@3.3.3 \
           zustand@4.5.2

# Dépendances de développement
npm install -D @eslint/js@9.9.1 \
             @types/d3@7.4.3 \
             @types/react@18.3.5 \
             @types/react-dom@18.3.0 \
             @types/react-syntax-highlighter@15.5.11 \
             @vitejs/plugin-react@4.3.1 \
             autoprefixer@10.4.18 \
             eslint@9.9.1 \
             eslint-plugin-react-hooks@5.1.0-rc.0 \
             eslint-plugin-react-refresh@0.4.11 \
             globals@15.9.0 \
             postcss@8.4.35 \
             tailwindcss@3.4.1 \
             typescript@5.5.3 \
             typescript-eslint@8.3.0 \
             vite@5.4.2
```

### 3. Configuration de Tailwind CSS

```bash
# Initialiser Tailwind CSS
npx tailwindcss init -p
```

Créer ou mettre à jour `src/index.css` :
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Styles personnalisés... */
```

### 4. Configuration de Supabase

1. Créer un nouveau projet sur [Supabase](https://supabase.com)
)
2. Noter l'URL du projet et la clé anon/public
3. Créer un fichier `.env` à la racine du projet :

```env
VITE_SUPABASE_URL=votre_url_supabase
VITE_SUPABASE_ANON_KEY=votre_cle_anon
VITE_OPENAI_API_KEY=votre_cle_api_openai
```

### 5. Configuration de la base de données

1. Aller dans l'interface SQL de Supabase
2. Exécuter les migrations dans l'ordre :

```sql
-- 1. Configuration initiale des utilisateurs
CREATE TABLE IF NOT EXISTS profiles (
  id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  role text NOT NULL CHECK (role IN ('super_admin', 'admin', 'user')),
  status boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- 2. Configuration des dossiers et documents
CREATE TABLE IF NOT EXISTS folders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  parent_id uuid REFERENCES folders(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS documents (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  folder_id uuid REFERENCES folders(id) ON DELETE CASCADE,
  name text NOT NULL,
  type text NOT NULL,
  group_name text,
  description text,
  url text,
  processed boolean DEFAULT false,
  size bigint,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS document_contents (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  document_id uuid REFERENCES documents(id) ON DELETE CASCADE NOT NULL,
  content text NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(document_id)
);

-- 3. Configuration des conversations
CREATE TABLE IF NOT EXISTS conversations (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title text NOT NULL,
  created_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  conversation_id uuid REFERENCES conversations(id) ON DELETE CASCADE NOT NULL,
  sender text NOT NULL CHECK (sender IN ('user', 'assistant')),
  content text NOT NULL,
  created_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS conversation_documents (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  conversation_id uuid REFERENCES conversations(id) ON DELETE CASCADE NOT NULL,
  document_id uuid REFERENCES documents(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  UNIQUE(conversation_id, document_id)
);

-- 4. Configuration des retours utilisateurs
CREATE TABLE IF NOT EXISTS user_feedback (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  content text NOT NULL,
  created_at timestamptz DEFAULT now(),
  read_at timestamptz,
  status text DEFAULT 'unread' CHECK (status IN ('unread', 'read', 'archived')),
  CONSTRAINT feedback_content_length CHECK (char_length(content) <= 2000)
);
```

### 6. Configuration du stockage Supabase

1. Créer un nouveau bucket "documents" dans Supabase Storage
2. Configurer les politiques de sécurité pour le bucket

### 7. Lancement du projet

```bash
# Démarrer le serveur de développement
npm run dev
```

## Structure des dossiers

```
src/
├── components/    # Composants React réutilisables
├── lib/          # Logique métier et utilitaires
├── pages/        # Pages principales
└── main.tsx      # Point d'entrée
```

## Commandes disponibles

```bash
# Installation des dépendances
npm install

# Développement
npm run dev

# Construction
npm run build

# Vérification du code
npm run lint
```

## Configuration de l'environnement de production

1. Configurer les variables d'environnement sur votre plateforme d'hébergement
2. Construire le projet : `npm run build`
3. Déployer le dossier `dist`

## Dépannage

### Problèmes courants

1. Erreur "Failed to fetch" avec Supabase
   - Vérifier les variables d'environnement
   - Vérifier la connexion internet
   - Vérifier les politiques RLS

2. Erreur lors du traitement des documents
   - Vérifier les permissions du bucket de stockage
   - Vérifier la taille des fichiers (limite: 100MB)
   - Vérifier les formats supportés

3. Erreur d'authentification
   - Vérifier la configuration de l'authentification Supabase
   - Vérifier les politiques RLS
   - Vérifier les rôles utilisateur

## Notes de sécurité

1. Ne jamais exposer les clés API dans le code
2. Toujours utiliser les variables d'environnement
3. Configurer correctement les politiques RLS
4. Valider les entrées utilisateur
5. Limiter la taille des fichiers uploadés
6. Vérifier les types MIME des fichiers

## Support des navigateurs

- Chrome 80+
- Firefox 75+
- Safari 13.1+
- Edge 80+

## Ressources

- [Documentation Supabase](https://supabase.com/docs)
)
- [Documentation OpenAI](https://platform.openai.com/docs)
)
- [Documentation Vite](https://vitejs.dev/guide/)
)
- [Documentation React](https://reactjs.org/docs/getting-started.html)
)
- [Documentation Tailwind CSS](https://tailwindcss.com/docs)
)