# Prompts pour la Création du Projet RINGO

## Contexte Initial

"Créer une application web moderne appelée RINGO qui permet aux utilisateurs d'analyser des documents grâce à l'intelligence artificielle. L'application doit offrir une interface intuitive pour gérer, visualiser et interagir avec les documents via une interface de chat.

Technologies requises :
- Frontend : React avec TypeScript
- Build : Vite
- Styles : Tailwind CSS
- Base de données : Supabase
- Authentication : Supabase Auth
- Stockage : Supabase Storage
- IA : OpenAI GPT-4 Turbo

L'interface doit suivre un design neumorphique moderne avec une palette de couleurs spécifique :
- Orange principal : #f15922
- Or secondaire : #dba747"

## Structure de Base

"Initialiser un nouveau projet React avec Vite et TypeScript. Configurer Tailwind CSS et mettre en place la structure de base du projet avec les dossiers suivants :

```
src/
├── components/    # Composants React réutilisables
├── lib/          # Logique métier et utilitaires
├── pages/        # Pages principales
└── main.tsx      # Point d'entrée
```

Configurer ESLint et TypeScript pour assurer la qualité du code."

## Configuration Supabase

"Créer un nouveau projet Supabase avec les tables suivantes :

1. profiles
- id (uuid, clé primaire)
- email (text, unique)
- role (text, enum: super_admin, admin, user)
- status (boolean)
- created_at (timestamp)
- updated_at (timestamp)

2. folders
- id (uuid, clé primaire)
- name (text)
- parent_id (uuid, auto-référence)
- created_at (timestamp)
- updated_at (timestamp)

3. documents
- id (uuid, clé primaire)
- folder_id (uuid, référence folders)
- name (text)
- type (text)
- group_name (text)
- description (text)
- url (text)
- processed (boolean)
- size (bigint)
- created_at (timestamp)
- updated_at (timestamp)

4. document_contents
- id (uuid, clé primaire)
- document_id (uuid, référence documents)
- content (text)
- created_at (timestamp)
- updated_at (timestamp)

5. conversations
- id (uuid, clé primaire)
- user_id (uuid, référence auth.users)
- title (text)
- created_at (timestamp)

6. messages
- id (uuid, clé primaire)
- conversation_id (uuid, référence conversations)
- sender (text, enum: user, assistant)
- content (text)
- created_at (timestamp)

7. conversation_documents
- id (uuid, clé primaire)
- conversation_id (uuid, référence conversations)
- document_id (uuid, référence documents)
- created_at (timestamp)

8. user_feedback
- id (uuid, clé primaire)
- user_id (uuid, référence auth.users)
- content (text)
- created_at (timestamp)
- read_at (timestamp)
- status (text, enum: unread, read, archived)

Configurer les politiques RLS appropriées pour chaque table."

## Interface Utilisateur

"Créer une interface utilisateur avec les composants suivants :

1. Header
- Logo RINGO avec animation
- Boutons d'administration pour les utilisateurs admin
- Menu utilisateur avec déconnexion

2. Layout Principal
- Sidebar gauche (25%) : Liste des conversations
- Zone centrale (50%) : Interface de chat
- Sidebar droite (25%) : Rapports et analyses

3. Composants Principaux
- DocumentImportModal pour l'upload de fichiers
- FileExplorer pour la navigation dans les dossiers
- MessageItem pour l'affichage des messages
- ReportGeneratorWidget pour la génération de rapports
- FeedbackButton pour les retours utilisateurs

Style neumorphique :
- Boutons avec effets d'ombre
- Transitions fluides
- États de hover et focus élégants"

## Traitement des Documents

"Implémenter le traitement des documents avec les fonctionnalités suivantes :

1. PDF
- Extraction de texte avec pdfjs-dist
- OCR avec Tesseract.js si nécessaire
- Préservation de la structure

2. Word
- Conversion avec mammoth
- Extraction du texte formaté
- Conservation des styles

3. JSON/CSV
- Parsing avec des utilitaires natifs
- Validation des données
- Structuration pour l'analyse

4. Système de Cache
- Stockage temporaire des résultats
- Nettoyage automatique
- Optimisation des performances"

## Intégration OpenAI

"Configurer l'intégration OpenAI avec :

1. Chat
- Streaming des réponses
- Contexte basé sur les documents
- Formatage Markdown
- Gestion des erreurs

2. Analyse
- Traitement par chunks
- Optimisation des tokens
- Gestion du contexte
- Réponses structurées

Prompt système :
```
Tu es Ringo, un assistant IA expert en analyse de documents.

Pour une meilleure lisibilité, structure tes réponses avec :
- Des titres en utilisant ## pour les sections principales
- Des sous-titres en utilisant ### pour les sous-sections
- Des points importants en **gras**
- Des listes à puces pour énumérer des éléments
- Des sauts de ligne pour aérer le texte
```"

## Sécurité

"Implémenter les mesures de sécurité suivantes :

1. Authentification
- Email/mot de passe avec Supabase Auth
- Gestion des sessions
- Protection contre la force brute

2. Autorisation
- Rôles (super_admin, admin, user)
- Politiques RLS granulaires
- Validation des actions

3. Stockage
- Bucket Supabase sécurisé
- Politiques d'accès aux fichiers
- Nettoyage automatique"

## Tests et Déploiement

"Configurer l'environnement de test et déploiement :

1. Variables d'Environnement
```env
VITE_SUPABASE_URL=url_supabase
VITE_SUPABASE_ANON_KEY=clé_anonyme
VITE_OPENAI_API_KEY=clé_api_openai
```

2. Scripts de Build
```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  }
}
```

3. Configuration Vite
- Optimisation des dépendances
- Gestion des chunks
- Support des WebWorkers"

## Maintenance

"Mettre en place les outils de maintenance :

1. Logs
- Suivi des erreurs
- Audit des accès
- Métriques de performance

2. Nettoyage
- Sessions expirées
- Cache des documents
- Fichiers temporaires

3. Monitoring
- État du système
- Utilisation des ressources
- Alertes automatiques"

## Extensions Futures

"Préparer le système pour les extensions futures :

1. API
- Points d'entrée RESTful
- Documentation OpenAPI
- Versioning

2. Intégrations
- Nouveaux types de documents
- Services externes
- Plugins personnalisés

3. Collaboration
- Partage de documents
- Annotations
- Commentaires en temps réel"