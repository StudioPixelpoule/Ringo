# Structure du Projet RINGO

## Vue d'Ensemble
```
/
├── src/                    # Code source principal
│   ├── components/         # Composants React réutilisables
│   ├── lib/               # Logique métier et utilitaires
│   ├── pages/             # Pages de l'application
│   └── main.tsx           # Point d'entrée
├── supabase/              # Configuration Supabase
│   └── migrations/        # Migrations de base de données
├── public/                # Fichiers statiques
└── .env                   # Variables d'environnement
```

## Détail des Dossiers

### /src/components/
Composants React réutilisables :
```
components/
├── AddUserModal.tsx           # Modal d'ajout d'utilisateur
├── ConversationList.tsx       # Liste des conversations
├── DatabaseIcon.tsx           # Icône de base de données
├── DeleteConfirmationModal.tsx # Modal de confirmation de suppression
├── DocumentIcon.tsx           # Icône de document
├── DocumentImportModal.tsx    # Modal d'import de documents
├── DocumentList.tsx           # Liste des documents
├── DocumentListIcon.tsx       # Icône de liste de documents
├── EnhancedMarkdown.tsx      # Rendu Markdown amélioré
├── FileExplorer.tsx          # Explorateur de fichiers
├── FileIcon.tsx              # Icônes de types de fichiers
├── FileManagementModal.tsx   # Modal de gestion des fichiers
├── Logo.tsx                  # Logo de l'application
├── MessageItem.tsx           # Item de message dans le chat
├── ReportGeneratorWidget.tsx # Widget de génération de rapports
├── ReportTemplateManager.tsx # Gestionnaire de modèles de rapports
├── StreamingText.tsx         # Texte avec effet de streaming
└── UserManagementModal.tsx   # Modal de gestion des utilisateurs
```

### /src/lib/
Logique métier et utilitaires :
```
lib/
├── audioProcessor.ts         # Traitement des fichiers audio
├── conversationStore.ts      # Store de gestion des conversations
├── documentProcessor.ts      # Traitement des documents
├── documentStore.ts          # Store de gestion des documents
├── openai.ts                # Intégration OpenAI
├── pdfProcessor.ts          # Traitement des fichiers PDF
├── reportGenerator.ts       # Génération de rapports
├── reportTemplateService.ts # Service de modèles de rapports
├── store.ts                 # Store principal
├── streamUtils.ts           # Utilitaires de streaming
├── supabase.ts             # Configuration Supabase
└── universalProcessor.ts    # Processeur de documents universel
```

### /src/pages/
Pages principales de l'application :
```
pages/
├── Chat.tsx    # Page principale de chat
└── Login.tsx   # Page de connexion
```

### /supabase/migrations/
Migrations de la base de données :
```
migrations/
├── 20250305010722_quick_dawn.sql           # Configuration initiale
├── 20250305010934_emerald_wildflower.sql   # Utilisateurs initiaux
├── 20250305034634_copper_star.sql          # Statut des profils
├── 20250305043102_bright_snow.sql          # Système de documents
├── 20250305165626_humble_dew.sql           # Système de conversations
├── 20250305180827_young_island.sql         # Traitement des documents
└── 20250312200256_ancient_fog.sql          # Politiques de sécurité
```

## Composants Principaux

### Interface Utilisateur
- **Header** : Navigation principale et contrôles utilisateur
- **Sidebar Gauche** : Liste des conversations
- **Zone Centrale** : Interface de chat avec documents
- **Modals** : Gestion des documents et utilisateurs

### Gestion des Documents
- Upload et traitement de documents
- Organisation en dossiers
- Extraction de contenu
- Indexation pour recherche

### Système de Chat
- Conversations contextuelles
- Streaming des réponses
- Support multi-documents
- Formatage Markdown

### Gestion des Utilisateurs
- Authentification
- Gestion des rôles
- Contrôle d'accès
- Statut des utilisateurs

## Base de Données

### Tables Principales
1. `profiles` : Gestion des utilisateurs
2. `folders` : Organisation des documents
3. `documents` : Métadonnées des documents
4. `document_contents` : Contenu des documents
5. `conversations` : Conversations utilisateur
6. `messages` : Messages des conversations
7. `conversation_documents` : Relations conversations-documents

### Sécurité
- Row Level Security (RLS) sur toutes les tables
- Politiques d'accès par rôle
- Validation des données
- Contraintes d'intégrité

## Intégrations

### Supabase
- Base de données PostgreSQL
- Authentification
- Stockage de fichiers
- Politiques de sécurité

### OpenAI
- GPT-4 Turbo pour l'analyse
- Streaming des réponses
- Gestion du contexte
- Optimisation des tokens

## Styles et Thème

### Couleurs Principales
- Orange : `#f15922`
- Or : `#dba747`
- Vert : `#106f69`
- Gris : `#cfd3bd`

### Design System
- Style neumorphique
- Animations fluides
- Interface responsive
- Composants modulaires

## Scripts et Commandes

### Développement
```bash
npm run dev      # Démarrage du serveur de développement
npm run build    # Construction du projet
npm run preview  # Prévisualisation de la build
npm run lint     # Vérification du code
```

### Base de Données
```bash
# Migrations Supabase
supabase migration new   # Nouvelle migration
supabase db push        # Application des migrations
supabase db reset       # Réinitialisation de la base
```