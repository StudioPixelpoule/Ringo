import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "npm:@supabase/supabase-js@2.39.7";
import OpenAI from "npm:openai@4.28.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

const SYSTEM_PROMPT = `Tu es Ringo, un expert en analyse de documents sp√©cialis√© dans la g√©n√©ration de rapports pour un public qu√©b√©cois.

Adapte ton langage et ton style pour un public qu√©b√©cois:
- Utilise un vocabulaire et des expressions courantes au Qu√©bec quand c'est pertinent
- Adopte un ton direct, pragmatique et concret
- √âvite les formulations trop complexes ou alambiqu√©es
- Pr√©f√®re les exemples concrets aux explications th√©oriques
- Sois pr√©cis et factuel, sans exag√©ration ni superlatifs inutiles

Pour une meilleure lisibilit√©, structure tes r√©ponses avec :
- Des titres en utilisant "##" pour les sections principales
- Des sous-titres en utilisant "###" pour les sous-sections
- Des points importants en **gras**
- Des listes √† puces pour √©num√©rer des √©l√©ments
- Des sauts de ligne pour a√©rer le texte

Lors de la r√©daction de textes en fran√ßais, veuillez respecter les r√®gles typographiques fran√ßaises suivantes :

Titres : N'utilisez pas de majuscules, sauf pour le premier mot et les noms propres. Par exemple, un titre correct serait : "Les R√®gles typographiques fran√ßaises" et non "Les R√®gles Typographiques Fran√ßaises".

Guillemets : Utilisez les guillemets fran√ßais (ou guillemets typographiques) pour les citations et les dialogues. Les guillemets fran√ßais sont des guillemets doubles angulaires :

Guillemets ouvrants : ¬´
Guillemets fermants : ¬ª Exemple : ¬´ Bonjour, comment √ßa va ? ¬ª
Apostrophes : Utilisez l'apostrophe typographique (') et non l'apostrophe droite ('). L'apostrophe typographique est courb√©e et s'utilise pour les √©lisions.
Exemple : L'apostrophe typographique est pr√©f√©rable √† l'apostrophe droite.`;

const COMPARATIVE_ANALYSIS_PROMPT = `Lorsqu'une requ√™te concerne l'analyse comparative de plusieurs documents ou instituts:

1. IMPORTANT: TOUJOURS analyser d'abord chaque document s√©par√©ment avant de proc√©der √† une comparaison.

2. Pour chaque document/institut:
   - Extraire UNIQUEMENT les informations explicitement mentionn√©es
   - Si une vision/mission n'est pas clairement identifi√©e, indiquer "Non mentionn√©e explicitement"
   - Ne jamais g√©n√©rer ou inf√©rer une vision non explicite

3. Format de r√©ponse pour les comparaisons:
   - Utiliser un tableau avec des colonnes uniformes
   - Citer les sources exactes quand elles existent
   - Utiliser des formulations identiques pour les cas similaires

4. Avant de finaliser la r√©ponse:
   - V√©rifier la coh√©rence entre les analyses individuelles et la synth√®se
   - S'assurer que toutes les informations proviennent directement des documents

5. Derni√®re v√©rification: Ne jamais pr√©senter une interpr√©tation comme un fait explicite du document.`;

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Verify request method
    if (req.method !== 'POST') {
      throw new Error('Method not allowed');
    }

    // Get auth token from headers
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
      }
    );

    // Verify user is authenticated
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser();
    if (authError || !user) {
      throw new Error('Unauthorized');
    }

    const { messages, documentContent } = await req.json();

    if (!messages || !Array.isArray(messages)) {
      throw new Error('Messages are required');
    }

    // Initialize OpenAI
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const openai = new OpenAI({
      apiKey: openaiApiKey
    });

    // Prepare messages
    const preparedMessages: any[] = [
      { role: 'system', content: SYSTEM_PROMPT }
    ];

    if (documentContent) {
      // Check if this is a comparative analysis query
      const latestQuery = messages[messages.length - 1]?.content || '';
      const isComparativeAnalysis = latestQuery.toLowerCase().includes('comparer') || 
                                    latestQuery.toLowerCase().includes('comparaison') || 
                                    latestQuery.toLowerCase().includes('diff√©rence');
      
      if (isComparativeAnalysis) {
        preparedMessages.push({
          role: 'system',
          content: COMPARATIVE_ANALYSIS_PROMPT
        });
      }

      // Add document context isolation instruction
      preparedMessages.push({
        role: 'system',
        content: `üîí R√àGLE CRITIQUE D'ISOLATION DU CONTEXTE üîí

Tu es dans une conversation isol√©e avec des documents sp√©cifiques. Tu dois ABSOLUMENT :

1. UTILISER UNIQUEMENT les documents fournis dans le contexte actuel
2. NE JAMAIS faire r√©f√©rence √† des documents d'autres conversations
3. NE JAMAIS mentionner des informations non pr√©sentes dans les documents fournis
4. Si une information demand√©e n'est pas dans les documents fournis, r√©pondre clairement : "Cette information n'est pas disponible dans les documents fournis."

Chaque document a un NOM. Cite toujours le nom du document (tel qu'il appara√Æt dans le TITRE) quand tu r√©f√©rences une information, en utilisant le format : "Document : [nom du fichier]".`
      });

      preparedMessages.push({
        role: 'system',
        content: `Contexte des documents :\n\n${documentContent}`
      });
    }

    // Add conversation messages
    preparedMessages.push(...messages);

    // Call OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: preparedMessages,
      temperature: 0.7,
      max_tokens: 4000,
      presence_penalty: 0.1,
      frequency_penalty: 0.2,
      top_p: 0.95
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response content received from OpenAI');
    }

    return new Response(
      JSON.stringify({ 
        success: true,
        response
      }),
      {
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200,
      }
    );
  } catch (error) {
    console.error('Error in process-chat function:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'An error occurred while processing chat'
      }),
      {
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: error instanceof Error && error.message === 'Unauthorized' ? 401 : 400
      }
    );
  }
}); 